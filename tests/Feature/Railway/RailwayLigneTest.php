<?php

namespace Tests\Feature\Railway;

use App\Livewire\Admin\Railway\Ligne\LigneList;
use App\Livewire\Admin\Railway\Ligne\LigneShow;
use App\Livewire\Admin\Railway\Ligne\LigneShowStation;
use App\Models\Railway\Gare;
use App\Models\Railway\Ligne;
use App\Models\Railway\LigneStation;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class RailwayLigneTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Model::unsetEventDispatcher();
        Model::flushEventListeners();
        $this->user = User::factory()->create([
            'admin' => true,
        ]);

    }

    public function test_rendering_ligne_list()
    {
        \Livewire::actingAs($this->user)
            ->test(LigneList::class)
            ->assertStatus(200);
    }

    public function test_delete_ligne()
    {
        $ligne = Ligne::factory()->create();
        \Livewire::actingAs($this->user)
            ->test(LigneList::class)
            ->call('delete', $ligne->id)
            ->assertStatus(200);
    }

    public function test_rendering_ligne_show()
    {
        $ligne = Ligne::factory()->create();
        \Livewire::actingAs($this->user)
            ->test(LigneShow::class, [$ligne->id])
            ->assertStatus(200);

        $this->assertDatabaseHas('lignes', [
            'id' => $ligne->id,
        ]);
    }

    public function test_refresh_ligne_show()
    {
        $ligne = Ligne::factory()->create();
        \Livewire::actingAs($this->user)
            ->test(LigneShow::class, [$ligne->id])
            ->call('refresh')
            ->assertStatus(200);
    }

    public function test_calculate_distance()
    {
        $ligne = Ligne::factory()->create();
        $station = Gare::factory()->create();
        LigneStation::factory()->create([
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
            'distance' => 100,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShow::class, [
                'id' => $ligne->id,
            ])
            ->call('calculateDistance')
            ->assertStatus(200);

        $this->assertDatabaseHas('lignes', [
            'id' => $ligne->id,
            'distance' => 100,
        ]);
    }

    public function test_calculate_distance_successful()
    {
        $ligne = Ligne::factory()->create();
        $station = Gare::factory()->create();
        LigneStation::factory()->create([
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
            'distance' => 100,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShow::class, [
                'id' => $ligne->id,
            ])
            ->call('calculateDistance')
            ->assertStatus(200);

        $this->assertDatabaseHas('lignes', [
            'id' => $ligne->id,
            'distance' => 100,
        ]);
    }

    public function test_calculate_price_successfull()
    {
        $ligne = Ligne::factory()->create([
            'distance' => 100,
        ]);
        $station = Gare::factory()->create();
        LigneStation::factory()->create([
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
            'distance' => 100,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShow::class, [
                'id' => $ligne->id,
            ])
            ->call('calculatePrice')
            ->assertStatus(200);
    }

    public function test_calculate_price_with_error_distance()
    {
        $ligne = Ligne::factory()->create([
            'distance' => 0,
        ]);
        $station = Gare::factory()->create();
        LigneStation::factory()->create([
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
            'distance' => 100,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShow::class, [
                'id' => $ligne->id,
            ])
            ->call('calculatePrice')
            ->assertStatus(200);
    }

    public function test_transfer_beta_to_production()
    {
        $ligne = Ligne::factory()->create([
            'visual' => 'beta',
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShow::class, [
                'id' => $ligne->id,
            ])
            ->call('production')
            ->assertStatus(200);

        $this->assertDatabaseHas('lignes', [
            'id' => $ligne->id,
            'visual' => 'prod',
        ]);
    }

    public function test_activate_ligne()
    {
        $ligne = Ligne::factory()->create([
            'active' => false,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShow::class, [
                'id' => $ligne->id,
            ])
            ->call('activate')
            ->assertStatus(200);

        $this->assertDatabaseHas('lignes', [
            'id' => $ligne->id,
            'active' => true,
        ]);
    }

    public function test_desactivate_ligne()
    {
        $ligne = Ligne::factory()->create([
            'active' => true,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShow::class, [
                'id' => $ligne->id,
            ])
            ->call('desactivate')
            ->assertStatus(200);

        $this->assertDatabaseHas('lignes', [
            'id' => $ligne->id,
            'active' => false,
        ]);
    }

    public function test_delete_ligne_by_show()
    {
        $ligne = Ligne::factory()->create([
            'active' => true,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShow::class, [
                'id' => $ligne->id,
            ])
            ->call('delete')
            ->assertStatus(200);

        $this->assertDatabaseMissing('lignes', [
            'id' => $ligne->id,
        ]);
    }

    public function test_adding_station()
    {
        $ligne = Ligne::factory()->create([
            'active' => true,
        ]);
        $station = Gare::factory()->create();

        \Livewire::actingAs($this->user)
            ->test(LigneShowStation::class, [
                'ligne' => $ligne,
                'stations' => [],
            ])
            ->set('ligne_id', $ligne->id)
            ->set('gare_id', $station->id)
            ->call('adding')
            ->assertStatus(200);
    }

    public function test_adding_second_station()
    {
        $ligne = Ligne::factory()->create([
            'active' => true,
        ]);
        $station = Gare::factory()->create();
        LigneStation::factory()->create([
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShowStation::class, [
                'ligne' => $ligne,
                'stations' => [],
            ])
            ->set('ligne_id', $ligne->id)
            ->set('gare_id', $station->id)
            ->call('adding')
            ->assertStatus(200);
    }

    public function test_adding_second_station_with_ligne_tgv()
    {
        $ligne = Ligne::factory()->create([
            'active' => true,
            'type_ligne' => 'tgv',
        ]);
        $station = Gare::factory()->create();
        LigneStation::factory()->create([
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShowStation::class, [
                'ligne' => $ligne,
                'stations' => [],
            ])
            ->set('ligne_id', $ligne->id)
            ->set('gare_id', $station->id)
            ->call('adding')
            ->assertStatus(200);
    }

    public function test_adding_second_station_with_ligne_intercity()
    {
        $ligne = Ligne::factory()->create([
            'active' => true,
            'type_ligne' => 'intercite',
        ]);
        $station = Gare::factory()->create();
        LigneStation::factory()->create([
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShowStation::class, [
                'ligne' => $ligne,
                'stations' => [],
            ])
            ->set('ligne_id', $ligne->id)
            ->set('gare_id', $station->id)
            ->call('adding')
            ->assertStatus(200);
    }

    public function test_adding_second_station_with_ligne_transilien()
    {
        $ligne = Ligne::factory()->create([
            'active' => true,
            'type_ligne' => 'transilien',
        ]);
        $station = Gare::factory()->create();
        LigneStation::factory()->create([
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShowStation::class, [
                'ligne' => $ligne,
                'stations' => [],
            ])
            ->set('ligne_id', $ligne->id)
            ->set('gare_id', $station->id)
            ->call('adding')
            ->assertStatus(200);
    }

    public function test_adding_second_station_with_ligne_tram_metro()
    {
        $ligne = Ligne::factory()->create([
            'active' => true,
            'type_ligne' => 'tram',
        ]);
        $station = Gare::factory()->create();
        LigneStation::factory()->create([
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShowStation::class, [
                'ligne' => $ligne,
                'stations' => [],
            ])
            ->set('ligne_id', $ligne->id)
            ->set('gare_id', $station->id)
            ->call('adding')
            ->assertStatus(200);
    }

    public function test_adding_second_station_with_ligne_other()
    {
        $ligne = Ligne::factory()->create([
            'active' => true,
            'type_ligne' => 'bus',
        ]);
        $station = Gare::factory()->create();
        LigneStation::factory()->create([
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShowStation::class, [
                'ligne' => $ligne,
                'stations' => [],
            ])
            ->set('ligne_id', $ligne->id)
            ->set('gare_id', $station->id)
            ->call('adding')
            ->assertStatus(200);
    }

    public function test_delete_station_with_ligne_show()
    {
        $ligne = Ligne::factory()->create([
            'active' => true,
        ]);
        $station = Gare::factory()->create();
        LigneStation::factory()->create([
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
        ]);

        \Livewire::actingAs($this->user)
            ->test(LigneShowStation::class, [
                'ligne' => $ligne,
                'stations' => [],
            ])
            ->call('delete', $station->id)
            ->assertStatus(200);

        $this->assertDatabaseMissing('ligne_stations', [
            'ligne_id' => $ligne->id,
            'gare_id' => $station->id,
        ]);
    }
}
