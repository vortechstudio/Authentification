<?php

namespace Tests\Feature\Account;

use App\Livewire\Account\App;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;
use Tests\TestCase;

class AccountSystemTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Model::unsetEventDispatcher();
        Model::flushEventListeners();
        $this->user = User::factory()->create([
            "email" => "test@test.com"
        ]);
    }

    public function test_render_info_compte()
    {
        $this->withoutExceptionHandling();

        $response = Livewire::actingAs($this->user)
            ->test(App::class);

        $response->assertStatus(200);
        $response->assertSee('test@test.com');
    }

    public function test_update_password_user()
    {
        $this->withoutExceptionHandling();

        Livewire::actingAs($this->user)
            ->test(App::class)
            ->set('password', '00000000')
            ->set('password_confirmation', '00000000')
            ->call('changePassword');

        $this->assertTrue(\Hash::check('00000000', User::first()->password));
    }

    public function test_delete_user()
    {
        $this->withoutExceptionHandling();

        Livewire::actingAs($this->user)
            ->test(App::class)
            ->call('deleteUser');

        $this->assertEquals(0, User::count());
    }

    public function tearDown(): void
    {
        // Réactiver l'observer après les tests
        Model::flushEventListeners();

        parent::tearDown();
    }
}
